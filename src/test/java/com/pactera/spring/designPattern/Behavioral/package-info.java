package com.pactera.spring.designPattern.Behavioral;
/**
 *1.责任链模式 为请求创建一个接受者对象的链，链上的每个接收者都持有下一个接收者的引用，根据条件判断当前接收者是否能处理
 *             能处理则处理，处理不了则将请求传给下个接受者进行处理；这实现了请求和接受者的解耦。
 *             例如Servlet的filter
 *2.观察者模式         对象间存在一对多的依赖关系，当一这个目标对象发生变化时通知多个依赖的对象并作出响应；
 *             被观察的对象称之为目标对象，观察的对象称之为观察者，在目标对象中以集合的形式组合进多个观察者
 *             当目标对象发生变化时，逐一通知观察者；
 *             目前的消息对内就是使用了该模式
 *3.策略模式            一个策略就是一种方案实现，某一种功能的实现有多种相似的方案实现时可以使用该模式
 *             可以认为是if-else形式的另外一个表现形式，但是更加清晰也更加灵活；
 *             spring MVC中也使用到了该模式当用户没有注册handlerMapping时给出默认的策略
 *             实现上是定义一个方案接口，对于不同的实现方案编写实现的策略类，运行时动态选择
 *             方案。
 *4.模板模式             一个抽象类公开的定义执行方法的模板，子类安需要重写模板方法中的调用的方法，调用的时候仍然调用
 *			   抽象类中的方法。一般在子类的公共方法逻辑相同，但是实现不同时采用此种模式。实现时要注意的
 *			   就是抽象类中的模板方法定位final的，需要子类根据自己的需要重写的方法可以定义为抽象方法
 *
 *
 */