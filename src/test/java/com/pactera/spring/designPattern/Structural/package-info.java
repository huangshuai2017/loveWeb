package com.pactera.spring.designPattern.Structural;
/**
 * 结构型设计模式关注类和对象的组合，继承的概念被用来组合接口和定义组合对象获得新功能的方式
 * 常用的结构型设计模式简介
 * 1.适配器模式 主要用在接口兼容的场景下使用，例如Spring MVC可框架中就使用该模式来保证它的controller既可以是实现了
 *              controller接口的对象，也可以是servlet对象等；
 * 2.过滤器模式 也叫标准模式，允许我们使用不同的标准也过滤一组对象，然后通过逻辑运算以解耦的方式将它们连接起来
 * 3.装饰器模式         允许对一个现有对象添加新的功能，同时又不改变其功能。
 *              实现方式上就是让装饰器类实现现有对象的装饰接口，然后将
 *              被装饰类以接口的类型引入，实现接口的时候调用被装饰类的方法，同时加入要装饰的功能；
 *              在MyBatis的二级缓存功能实现上大量使用了该模式
 * 4.代理模式        一个类代表另一个类的功能，分为静态代理和动态代理，动态代理从实现上又分为针对接口代理和不针对接口的代理
 *            针对接口的动态代理实现典型为Java的JDK动态代理，非接口的动态代理实现典型为aspectj,使用字节码框架为要被代理的
 *            对象生成一个子类；动态代理模式使用较为广泛，例如Spring的aop就是基于该模式。
 *            适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口；
 *            装饰器模式为了增强功能，而代理模式是为了加以控制
 *
 *
 *
 */